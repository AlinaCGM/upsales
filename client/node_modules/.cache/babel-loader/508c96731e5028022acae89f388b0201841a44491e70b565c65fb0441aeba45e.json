{"ast":null,"code":"var _jsxFileName = \"/home/alina/Desktop/1_lexicon/upsales/client/src/pages/Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport TransactionForm from '../components/TransactionForm';\nimport TransactionList from '../components/TransactionList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [balance, setBalance] = useState(100);\n  const fetchTransactions = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/transactions');\n      if (response.ok) {\n        const data = await response.json();\n        setTransactions(data);\n      } else {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n    }\n  };\n  const fetchBalance = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/balance');\n      if (response.ok) {\n        const data = await response.json();\n        setBalance(data.balance);\n      } else {\n        throw Error(`HTTP error! Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n    }\n  };\n  const submitTransaction = async (accountId, amount) => {\n    try {\n      const response = await fetch('http://localhost:3000/transaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          account_id: accountId,\n          amount: parseFloat(amount)\n        })\n      });\n      if (response.ok) {\n        fetchTransactions();\n        fetchBalance();\n      } else {\n        const errorText = await response.text();\n        console.error('Transaction submission failed');\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    }\n  };\n  useEffect(() => {\n    fetchTransactions();\n    fetchBalance();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Financial Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionForm, {\n      onSubmit: submitTransaction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionList, {\n      transactions: transactions,\n      balance: balance\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"xupmoMWuQK0lIAETzc8EUn67CLI=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","TransactionForm","TransactionList","jsxDEV","_jsxDEV","Home","_s","transactions","setTransactions","balance","setBalance","fetchTransactions","response","fetch","ok","data","json","Error","status","error","console","fetchBalance","submitTransaction","accountId","amount","method","headers","body","JSON","stringify","account_id","parseFloat","errorText","text","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["/home/alina/Desktop/1_lexicon/upsales/client/src/pages/Home.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TransactionForm from '../components/TransactionForm';\nimport TransactionList from '../components/TransactionList';\n\nfunction Home() {\n  const [transactions, setTransactions] = useState([]);\n  const [balance, setBalance] = useState(100);\n\n  const fetchTransactions = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/transactions');\n      if (response.ok) {\n        const data = await response.json();\n        setTransactions(data);\n      } else {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n    }\n  };\n\n  const fetchBalance = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/balance');\n      if (response.ok) {\n        const data = await response.json();\n        setBalance(data.balance);\n      } else {\n        throw Error(`HTTP error! Status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n    }\n  };\n\n  const submitTransaction = async (accountId: string, amount: number) => {\n    try {\n      const response = await fetch('http://localhost:3000/transaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ account_id: accountId, amount: parseFloat(amount) }),\n      });\n  \n      if (response.ok) {\n        fetchTransactions();\n        fetchBalance();\n      } else {\n        const errorText = await response.text();\n        console.error('Transaction submission failed');\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    }\n  };\n  \n\n  useEffect(() => {\n    fetchTransactions();\n    fetchBalance();\n  }, []);\n\n  return (\n    <div>\n      <h1>Financial Transactions</h1>\n      <TransactionForm onSubmit={submitTransaction} />\n      <TransactionList transactions={transactions} balance={balance} />\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}