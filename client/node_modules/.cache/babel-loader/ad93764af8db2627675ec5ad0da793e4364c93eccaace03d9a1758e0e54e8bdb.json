{"ast":null,"code":"var _jsxFileName = \"/home/alina/Desktop/1_lexicon/upsales/client/src/pages/Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport TransactionForm from '../components/TransactionForm';\nimport TransactionList from '../components/TransactionList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// The main component for the Home page\nconst Home = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [accountId, setAccountId] = useState('');\n  const [amount, setAmount] = useState(0);\n  const [balance, setBalance] = useState(0);\n  const fetchTransactions = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/transactions');\n      if (response.ok) {\n        const data = await response.json();\n        setTransactions(data);\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n    }\n  };\n  const fetchBalance = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/balance');\n      if (response.ok) {\n        const data = await response.json();\n        setBalance(data.balance);\n      }\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n    }\n  };\n  const submitTransaction = async event => {\n    event.preventDefault();\n    try {\n      const response = await fetch('http://localhost:3000/transaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          account_id: accountId,\n          amount: parseFloat(amount)\n        })\n      });\n      if (response.ok) {\n        fetchTransactions();\n        fetchBalance();\n      } else {\n        const errorText = await response.text();\n        console.error('Transaction submission failed');\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    }\n  };\n  useEffect(() => {\n    fetchTransactions();\n    fetchBalance();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Home container mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(TransactionForm, {\n          onSubmit: addTransaction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(TransactionList, {\n          transactions: transactions,\n          currentBalance: currentBalance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"TZ+cC/89Nzzat+00hAD68uqYO3Q=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","TransactionForm","TransactionList","jsxDEV","_jsxDEV","Home","_s","transactions","setTransactions","loading","setLoading","accountId","setAccountId","amount","setAmount","balance","setBalance","fetchTransactions","response","fetch","ok","data","json","error","console","fetchBalance","submitTransaction","event","preventDefault","method","headers","body","JSON","stringify","account_id","parseFloat","errorText","text","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","addTransaction","currentBalance","_c","$RefreshReg$"],"sources":["/home/alina/Desktop/1_lexicon/upsales/client/src/pages/Home.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport TransactionForm from '../components/TransactionForm';\nimport TransactionList from '../components/TransactionList';\n\ninterface Transaction {\n    transaction_id: string;\n    account_id: string;\n    amount: number;\n    created_at: string;\n  }\n\n// The main component for the Home page\nconst Home = () => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [accountId, setAccountId] = useState<string>('');\n  const [amount, setAmount] = useState<number>(0);\n  const [balance, setBalance] = useState<number>(0);\n\n  const fetchTransactions = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/transactions');\n      if (response.ok) {\n        const data = await response.json();\n        setTransactions(data);\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n    }\n  };\n\n  const fetchBalance = async () => {\n    try {\n      const response = await fetch('http://localhost:3000/balance');\n      if (response.ok) {\n        const data = await response.json();\n        setBalance(data.balance);\n      }\n    } catch (error) {\n      console.error('Error fetching balance:', error);\n    }\n  };\n\n  const submitTransaction = async (event: React.FormEvent) => {\n    event.preventDefault();\n    try {\n      const response = await fetch('http://localhost:3000/transaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ account_id: accountId, amount: parseFloat(amount) }),\n      });\n\n      if (response.ok) {\n        fetchTransactions();\n        fetchBalance();\n      } else {\n        const errorText = await response.text();\n        console.error('Transaction submission failed');\n      }\n    } catch (error) {\n      console.error('An error occurred:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchTransactions();\n    fetchBalance();\n  }, []);\n\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"Home container mt-5\">\n      <div className='row'>\n        <div className='col'>\n          <TransactionForm onSubmit={addTransaction} />\n        </div>\n        <div className='col'>\n          <TransactionList transactions={transactions} currentBalance={currentBalance} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}