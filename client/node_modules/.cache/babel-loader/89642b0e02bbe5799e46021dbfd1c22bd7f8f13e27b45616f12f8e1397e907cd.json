{"ast":null,"code":"var _jsxFileName = \"/home/alina/Desktop/1_lexicon/upsales/client/src/pages/Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TransactionForm from '../components/TransactionForm';\nimport TransactionList from '../components/TransactionList';\n\n// Define a type for transactions if not already defined\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [currentBalance, setCurrentBalance] = useState(0);\n  const addTransaction = (accountId, amount) => {\n    // Here you would typically handle the transaction, e.g., by calling an API\n    // For this example, let's just update the local state\n    const newTransaction = {\n      id: Date.now().toString(),\n      // A mock ID, typically you'd get this from your backend\n      account: accountId,\n      amount,\n      type: amount < 0 ? 'withdrawal' : 'deposit' // Determine type based on amount\n    };\n\n    // Update transactions\n    setTransactions([...transactions, newTransaction]);\n\n    // Update current balance\n    setCurrentBalance(currentBalance + amount);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Home container mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [\"      \", /*#__PURE__*/_jsxDEV(TransactionForm, {\n          onSubmit: addTransaction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 40\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [\"      \", /*#__PURE__*/_jsxDEV(TransactionList, {\n          transactions: transactions,\n          currentBalance: currentBalance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 40\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"gj0oB4Rb2el5yQt0rIxuHIa8vdY=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","TransactionForm","TransactionList","jsxDEV","_jsxDEV","Home","_s","transactions","setTransactions","currentBalance","setCurrentBalance","addTransaction","accountId","amount","newTransaction","id","Date","now","toString","account","type","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/alina/Desktop/1_lexicon/upsales/client/src/pages/Home.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport TransactionForm from '../components/TransactionForm';\nimport TransactionList from '../components/TransactionList';\n\n// Define a type for transactions if not already defined\ntype TransactionType = 'deposit' | 'withdrawal';\n\ninterface Transaction {\n  id: string;\n  amount: number;\n  account: string;\n  type: TransactionType;\n}\n\nconst Home: React.FC = () => {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [currentBalance, setCurrentBalance] = useState<number>(0);\n\n  const addTransaction = (accountId: string, amount: number) => {\n    // Here you would typically handle the transaction, e.g., by calling an API\n    // For this example, let's just update the local state\n    const newTransaction: Transaction = {\n      id: Date.now().toString(), // A mock ID, typically you'd get this from your backend\n      account: accountId,\n      amount,\n      type: amount < 0 ? 'withdrawal' : 'deposit', // Determine type based on amount\n    };\n\n    // Update transactions\n    setTransactions([...transactions, newTransaction]);\n\n    // Update current balance\n    setCurrentBalance(currentBalance + amount);\n  };\n\n  return (\n    <div className=\"Home container mt-5\">\n        <div className='row'>\n            <div className='col'>      <TransactionForm onSubmit={addTransaction} />\n</div>\n            <div className='col'>      <TransactionList transactions={transactions} currentBalance={currentBalance} />\n</div>\n        </div>\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,eAAe,MAAM,+BAA+B;;AAE3D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAUA,MAAMC,IAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAgB,EAAE,CAAC;EACnE,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAS,CAAC,CAAC;EAE/D,MAAMW,cAAc,GAAGA,CAACC,SAAiB,EAAEC,MAAc,KAAK;IAC5D;IACA;IACA,MAAMC,cAA2B,GAAG;MAClCC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MAAE;MAC3BC,OAAO,EAAEP,SAAS;MAClBC,MAAM;MACNO,IAAI,EAAEP,MAAM,GAAG,CAAC,GAAG,YAAY,GAAG,SAAS,CAAE;IAC/C,CAAC;;IAED;IACAL,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAEO,cAAc,CAAC,CAAC;;IAElD;IACAJ,iBAAiB,CAACD,cAAc,GAAGI,MAAM,CAAC;EAC5C,CAAC;EAED,oBACET,OAAA;IAAKiB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,eAChClB,OAAA;MAAKiB,SAAS,EAAC,KAAK;MAAAC,QAAA,gBAChBlB,OAAA;QAAKiB,SAAS,EAAC,KAAK;QAAAC,QAAA,GAAC,QAAM,eAAAlB,OAAA,CAACH,eAAe;UAACsB,QAAQ,EAAEZ;QAAe;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/E,CAAC,eACMvB,OAAA;QAAKiB,SAAS,EAAC,KAAK;QAAAC,QAAA,GAAC,QAAM,eAAAlB,OAAA,CAACF,eAAe;UAACK,YAAY,EAAEA,YAAa;UAACE,cAAc,EAAEA;QAAe;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACO;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACrB,EAAA,CA/BID,IAAc;AAAAuB,EAAA,GAAdvB,IAAc;AAiCpB,eAAeA,IAAI;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}